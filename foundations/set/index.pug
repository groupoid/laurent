include ../../header

html
    head
        meta(property='og:title'       content='SET')
        meta(property='og:description' content='Predicate-Based Sets')
        meta(property='og:url'         content='https://laurent.groupoid.space/foundations/set/')

block title
    title SET

block content
    nav
        <a href='../../index.html'>LAURENT</a>
        <a href='#'>SET</a>
    article.main
        .exe
            section
                h1 PREDICATE-BASED SETS
                span.
        aside
            time Published: 21 MAR 2025
        .exe
            section
                +tex.
                    $\text{Set}$-type defines a set as a predicate over a base type,
                    capturing the classical notion of a collection via propositional conditions.
                    It serves as the foundation for topology, measure theory, and real analysis
                    in this system, blending type theory with set-theoretic intuition.
                +tex.
                    Sets are constructed as $\{ x : A \mid P(x) \}$, where $P(x)$ is a proposition,
                    and are used to model intervals, measurable sets, and spaces in Schwartzâ€™s framework.

                h2 Formation
                +tex.
                    $\mathbf{Definition\ 1.1}$ ($\text{Set}$-Formation). A set is formed over
                    a base type $A : U$ with a predicate $P : A \rightarrow \text{Prop}$,
                    yielding a term-level set type.
                +tex(true).
                    $$
                        \text{Set} : U \rightarrow U =_{def} \{ x : A \mid P(x) \}.
                    $$
                +code.
                    type exp =
                      | Set of exp  (* Set (Lam ("x", A, P(x))) *)

                h2 Introduction
                +tex.
                    $\mathbf{Definition\ 1.2}$ ($\text{Set}$-Introduction). A set is introduced
                    by a lambda abstraction $\lambda x. P(x)$, where $P(x) : \text{Prop}$ defines
                    membership for all $x : A$.
                +tex(true).
                    $$
                        \{ x : A \mid P(x) \} : \text{Set}(A) =_{def} \text{Set}(\lambda x. P(x)).
                    $$
                +code.
                    let interval_a_b (a : exp) (b : exp) : exp =
                      Set (Lam ("x", Real, And (RealIneq (Lte, a, Var "x"), RealIneq (Lte, Var "x", b))))

                h2 Elimination
                +tex.
                    $\mathbf{Definition\ 1.3}$ ($\text{Set}$-Elimination). Membership in a set
                    $S = \{ x : A \mid P(x) \}$ is tested by applying $S$ to an element $a : A$,
                    yielding the proposition $P(a)$.
                +tex(true).
                    $$
                        S(a) : \text{Prop} =_{def} \text{App}(S, a).
                    $$
                +code.
                    let member (s : exp) (a : exp) : exp =
                      App (s, a)  (* S a *)

                h2 Computation
                +tex.
                    $\mathbf{Definition\ 1.4}$ ($\text{Set}$-Computation). Applying a set to an
                    element reduces to the predicate with substitution.
                +tex(true).
                    $$
                        \{ x : A \mid P(x) \}(a) =_{\text{Prop}} P(a).
                    $$
                +code.
                    let reduce env ctx = function
                      | App (Set (Lam (x, _, body)), arg) -> subst x arg body
                      | _ -> ...

                h2 Uniqueness
                +tex.
                    $\mathbf{Definition\ 1.5}$ ($\text{Set}$-Uniqueness). Two sets $S = \{ x : A \mid P(x) \}$
                    and $T = \{ x : A \mid Q(x) \}$ are equal if their predicates are propositionally
                    equivalent, i.e., $\forall x : A, P(x) \iff Q(x)$.
                +tex(true).
                    $$
                        S =_{\text{Set}(A)} T \iff \forall x : A, P(x) =_{\text{Prop}} Q(x).
                    $$
                +code.
                    (* Handled by SetEq and Z3 *)

                h2 Theorems
                +tex.
                    $\mathbf{Theorem\ 1.6}$ (Set Comprehension). Any predicate $P : A \rightarrow \text{Prop}$
                    defines a valid set $\{ x : A \mid P(x) \}$, with membership $S(a) \iff P(a)$.
                +tex.
                    $\mathbf{Theorem\ 1.7}$ (Power Set). The power set of a type $A$ is the set of all
                    subsets, represented as $\text{Power}(A) = \text{Set}(\text{Set}(A))$.
                +tex(true).
                    $$
                        \text{Power}(A) : U =_{def} \{ S : \text{Set}(A) \mid \top \}.
                    $$
                +code.
                    let power (a : exp) : exp = Power a

include ../../footer
