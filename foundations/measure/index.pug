include ../../header

html
    head
        meta(property='og:title'       content='MEASURE')
        meta(property='og:description' content='Measure Type and Constructor')
        meta(property='og:url'         content='https://laurent.groupoid.space/foundations/measure/')

block title
    title MEASURE

block content
    nav
        <a href='../../index.html'>LAURENT</a>
        <a href='#'>MEASURE</a>
    article.main
        .exe
            section
                h1 MEASURE TYPE
                span.
        aside
            time Published: 21 MAR 2025
        .exe
            section
                +tex.
                    The $\text{Measure}$ type classifies measure spaces, pairing a base type with a
                    $\sigma$-algebra to define the domain of measure functions. It provides a higher-level
                    construct for typing measures ($\mu$) and enabling integration in Schwartz’s analysis.
                    Measures are introduced via the $\mu$ constructor, ensuring well-defined measurable spaces.
                +tex.
                    This framework supports Lebesgue integration and custom measures, with evaluation tied
                    to real arithmetic and measure axioms.
                +tex.
                    Compared to Lean’s measure theory library in $\texttt{mathlib}$,
                    which defines measures as functions from a $\sigma$-algebra to the extended reals
                    $\overline{\mathbb{R}}$ with axioms encoded as typeclass constraints, our system emphasizes
                    a more explicit type-theoretic construction. Lean’s approach leverages its dependent type
                    system to integrate measures seamlessly with its calculus library, prioritizing automation
                    and proof reuse (e.g., for Lebesgue integrals). In contrast, our $\text{Measure}(A, \Sigma)$
                    type and $\mu$ constructor offer a minimalist, MLTT-inspired design tailored for Schwartz’s
                    analysis, trading some of Lean’s generality and tooling for clarity in specifying custom
                    measures and their computational behavior.

                h2 Formation
                +tex.
                    $\mathbf{Definition\ 4.7.1}$ ($\text{Measure}$-Formation). The measure type is formed
                    over a base type $A : U$ and a $\sigma$-algebra $\Sigma : \text{Set}(\text{Set}(A))$,
                    classifying measure functions.
                +tex(true).
                    $$
                        \text{Measure} : U =_{def} \text{Measure}(A, \Sigma).
                    $$
                +code.
                    type exp =
                      | Measure of exp * exp  (* Measure (A, Σ) *)

                h2 Introduction
                +tex.
                    $\mathbf{Definition\ 4.7.2}$ ($\text{Measure}$-Introduction). A measure is introduced
                    by the constructor $\mu(A, \Sigma, f)$, where $f : \text{Set}(A) \to \mathbb{R}$ is a
                    function satisfying measure axioms (non-negativity, countable additivity).
                +tex(true).
                    $$
                        \mu(A, \Sigma, \lambda S. m(S)) : \text{Measure}(A, \Sigma).
                    $$
                +code.
                    let measure_intro (a : exp) (sigma : exp) (f : exp) : exp =
                      Mu (a, sigma, f)
                +tex.
                    For example, the Lebesgue measure is introduced as:
                +code.
                    let lebesgue_measure =
                      Mu (Real, Power (Set Real),
                          Lam ("S", Set Real,
                              If (RealIneq (Lte, a, b), RealOps (Minus, b, a), Zero)))

                h2 Elimination
                +tex.
                    $\mathbf{Definition\ 4.7.3}$ ($\text{Measure}$-Elimination). A measure $\mu :
                    \text{Measure}(A, \Sigma)$ is applied to a set $S : \Sigma$, yielding a real number
                    $\mu(S)$.
                +tex(true).
                    $$
                        \mu : \text{Measure}(A, \Sigma) \implies \mu(S) : \mathbb{R} \text{ for } S : \Sigma.
                    $$
                +code.
                    let apply_measure (mu : exp) (s : exp) : exp =
                      App (mu, s)  (* μ S *)

                h2 Computation
                +tex.
                    $\mathbf{Definition\ 4.7.4}$ ($\text{Measure}$-Computation). Applying a measure reduces
                    to substituting the set argument into the measure function:
                +tex(true).
                    $$
                        \mu(A, \Sigma, \lambda S. m(S))(T) =_{\mathbb{R}} m(T).
                    $$
                +code.
                    let reduce env ctx = function
                      | App (Mu (_, _, Lam (s, _, body)), arg) -> subst s arg body
                      | _ -> ...

                h2 Uniqueness
                +tex.
                    $\mathbf{Definition\ 4.7.5}$ ($\text{Measure}$-Uniqueness). Two measure types
                    $\text{Measure}(A, \Sigma)$ and $\text{Measure}(A', \Sigma')$ are equal if $A = A'$ and
                    $\Sigma = \Sigma'$. Two measures $\mu_1, \mu_2 : \text{Measure}(A, \Sigma)$ are equal if
                    they agree on all sets in $\Sigma$.
                +tex(true).
                    $$
                        \text{Measure}(A, \Sigma) =_U \text{Measure}(A', \Sigma')
                    $$
                    $$
                        \iff A =_U A' \land \Sigma =_{\text{Set}(\text{Set}(A))} \Sigma'.
                    $$
                    $$
                        \mu_1 =_{\text{Measure}(A, \Sigma)} \mu_2
                    $$
                    $$
                        \iff \forall S : \Sigma, \mu_1(S) =_{\mathbb{R}} \mu_2(S).
                    $$
                +code.
                    let equal_measure env ctx (Mu (a1, s1, f1)) (Mu (a2, s2, f2)) =
                      equal env ctx a1 a2 && equal env ctx s1 s2 (* and functional equivalence *)

                h2 Theorems
                +tex.
                    $\mathbf{Theorem\ 4.7.6}$ (Measurable Space). $\text{Measure}(A, \Sigma)$ defines a
                    measurable space if $\Sigma$ is a $\sigma$-algebra over $A$, supporting integration.
                +tex(true).
                    $$
                        \text{is_sigma_algebra}(\Sigma)
                    $$
                    $$
                        \implies \text{Measure}(A, \Sigma) \text{ is valid}.
                    $$
                +tex.
                    $\mathbf{Theorem\ 4.7.7}$ (Lebesgue Measure Typing). The Lebesgue measure over
                    $\mathbb{R}$ is typed as $\text{Measure}(\mathbb{R}, \text{Power}(\text{Set}(\mathbb{R})))$.
                +code.
                    let lebesgue_type = Measure (Real, Power (Set Real))
                +tex.
                    $\mathbf{Theorem\ 4.7.8}$ (Non-Negativity). For any measure $\mu : \text{Measure}(A, \Sigma)$
                    and set $S : \Sigma$, $\mu(S) \geq 0$.
                +tex(true).
                    $$
                        \forall S : \Sigma, \mu(S) \geq 0.
                    $$
                +tex.
                    $\mathbf{Theorem\ 4.7.9}$ (Countable Additivity). If $\{ S_n \}_{n : \mathbb{N}}$ is a
                    countable collection of disjoint sets in $\Sigma$, then:
                +tex(true).
                    $$
                        \mu\left(\bigcup_{n : \mathbb{N}} S_n\right) = \sum_{n : \mathbb{N}} \mu(S_n).
                    $$
                +code.
                    let sigma_algebra = is_sigma_algebra (Power (Set Real))

include ../../footer
