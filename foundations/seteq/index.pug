include ../../header

html
    head
        meta(property='og:title'       content='SETEQ')
        meta(property='og:description' content='Set Equality')
        meta(property='og:url'         content='https://laurent.groupoid.space/foundations/seteq/')

block title
    title SETEQ

block content
    nav
        <a href='../../index.html'>LAURENT</a>
        <a href='#'>SETEQ</a>
    article.main
        .exe
            section
                h1 SET EQUALITY
                span.
        aside
            time Published: 21 MAR 2025
        .exe
            section
                +tex.
                    $\text{SetEq}$-type defines propositional equality between sets, leveraging
                    the Z3 SMT solver to enforce equivalence of predicates over real numbers,
                    including equations and inequalities. It ensures rigorous set identity in analysis.
                +tex.
                    In this system, $\text{SetEq}$ connects type theory to classical mathematics by
                    reducing set equality to logical equivalence, validated mechanically via Z3.

                h2 Formation
                +tex.
                    $\mathbf{Definition\ 3.2.1}$ ($\text{SetEq}$-Formation). Set equality is a proposition
                    asserting that two sets $S, T : \text{Set}(A)$ are equal, defined by predicate equivalence.
                +tex(true).
                    $$
                        \text{SetEq} : \text{Prop} =_{def} S =_{\text{Set}(A)} T.
                    $$
                +code.
                    type exp =
                      | SetEq of exp * exp  (* S =s T *)

                h2 Introduction
                +tex.
                    $\mathbf{Definition\ 3.2.2}$ ($\text{SetEq}$-Introduction). Equality between sets
                    $S = \{ x : A \mid P(x) \}$ and $T = \{ x : A \mid Q(x) \}$ is introduced by proving
                    $\forall x : A, P(x) \iff Q(x)$, enforced by Z3.
                +tex(true).
                    $$
                        S =_{\text{Set}(A)} T =_{def} \forall x : A, P(x) =_{\text{Prop}} Q(x).
                    $$
                +code.
                    let set_eq (s : exp) (t : exp) : exp =
                      SetEq (s, t)

                h2 Elimination
                +tex.
                    $\mathbf{Definition\ 3.2.3}$ ($\text{SetEq}$-Elimination). If $S =_{\text{Set}(A)} T$,
                    then for any $a : A$, membership $S(a)$ implies $T(a)$, and vice versa, validated by Z3.
                +tex(true).
                    $$
                        S =_{\text{Set}(A)} T \implies S(a) =_{\text{Prop}} T(a).
                    $$
                +code.
                    let reduce env ctx = function
                      | SetEq (Set (Lam (x1, Real, p1)), Set (Lam (x2, Real, p2))) ->
                          smt_verify_iff ctx_z3 p1 p2
                      | _ -> ...

                h2 Computation
                +tex.
                    $\mathbf{Definition\ 3.2.4}$ ($\text{SetEq}$-Computation). The Z3 solver reduces
                    $\text{SetEq}(S, T)$ to $\text{True}$ if $\forall x, P(x) \iff Q(x)$ is unsatisfiable
                    when negated, otherwise $\text{False}$.
                +tex(true).
                    $$
                        S =_{\text{Set}(A)} T =_{\text{Prop}} \text{Z3}(\forall x, P(x) \iff Q(x)).
                    $$
                +code.
                    let smt_verify_iff ctx p q =
                      let solver = Solver.mk_solver ctx None in
                      let p_z3 = z3_of_exp ctx p in
                      let q_z3 = z3_of_exp ctx q in
                      let not_iff = Boolean.mk_not ctx (Boolean.mk_iff ctx p_z3 q_z3) in
                      Solver.add solver [not_iff];
                      match Solver.check solver [] with
                        | Solver.UNSATISFIABLE -> True
                        | Solver.SATISFIABLE -> False
                        | _ -> failwith "Z3 returned UNKNOWN"

                h2 Uniqueness
                +tex.
                    $\mathbf{Definition\ 3.2.5}$ ($\text{SetEq}$-Uniqueness). As a proposition,
                    $\text{SetEq}(S, T)$ is 0-truncated; all proofs of equality are equivalent in $\text{Prop}$.
                +tex(true).
                    $$
                        p, q : S =_{\text{Set}(A)} T \implies p =_{\text{Prop}} q.
                    $$

                h2 Theorems
                +tex.
                    $\mathbf{Theorem\ 3.2.6}$ (Extensionality). Two sets are equal if and only if their
                    predicates are logically equivalent, as verified by Z3 over real arithmetic.
                +tex(true).
                    $$
                        S =_{\text{Set}(A)} T \iff \forall x : A, S(x) \iff T(x).
                    $$
                +tex.
                    $\mathbf{Theorem\ 3.2.7}$ (Z3 Soundness). If Z3 returns $\text{True}$ for
                    $\text{SetEq}(S, T)$, then $S$ and $T$ are equal in the classical sense over $\mathbb{R}$.
                +code.
                    let test_set_eq_correct =
                      let s1 = Set (Lam ("x", Real, RealIneq (Lte, Var "x", One))) in
                      let s2 = Set (Lam ("x", Real, Or (RealIneq (Lt, Var "x", One), RealIneq (Eq, Var "x", One)))) in
                      SetEq (s1, s2)  (* Z3 proves True *)

include ../../footer
