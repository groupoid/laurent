include ../../header

html
    head
        meta(property='og:title'       content='QUOTIENT')
        meta(property='og:description' content='Quotient Type')
        meta(property='og:url'         content='https://laurent.groupoid.space/foundations/quotient/')

block title
    title QUOTIENT

block content
    nav
        <a href='../../index.html'>LAURENT</a>
        <a href='#'>QUOTIENT</a>
    article.main
        .exe
            section
                h1 QUOTIENT TYPE
                span.
        aside
            time Published: 22 MAR 2025
        .exe
            section
                +tex.
                    The $\text{Quotient}$ type constructs a type from a base type and an equivalence
                    relation, quotienting the base type by the relation. It is a fundamental construct
                    in type theory for defining types modulo equivalence, supporting applications like
                    setoids and modular arithmetic.
                +tex.
                    Following Lean’s quotient module, this type is formed via $\text{Quotient}$,
                    introduced via $\text{Quot}$, and eliminated via the dependent eliminator
                    $\text{QuotInd}$, ensuring computational and logical consistency.
                +tex.
                    This system assumes the quotient type is built into the core, matching Lean’s
                    design, where $\text{Quotient}$ defines the type, $\text{Quot}$ maps elements to
                    equivalence classes, and $\text{QuotInd}$ provides the dependent elimination
                    principle. The non-dependent eliminator $\text{QuotLift}$ is derivable from
                    $\text{QuotInd}$.

                h2 Formation
                +tex.
                    $\mathbf{Definition\ 7.1.1}$ ($\text{Quotient}$-Formation). The quotient type is
                    formed over a base type $\alpha : U$ and a relation
                    $r : \alpha \to \alpha \to \text{Prop}$, yielding a new type
                    $\text{Quotient}\ \alpha\ r : U$.
                +tex(true).
                    $$
                        \text{Quotient} :
                    $$
                    $$
                        \prod_{\alpha : U} \prod_{r : \alpha \to \alpha \to \text{Prop}} U.
                    $$
                +code.
                    type exp =
                      | Quotient of exp * exp  (* Quotient α r *)
                      | Quot of exp * exp * exp  (* Quot α r a *)
                      | QuotLift of exp * exp * exp * exp * exp  (* QuotLift α r β f h *)
                      | QuotInd of exp * exp * exp * exp  (* QuotInd α r β h *)

                h2 Introduction
                +tex.
                    $\mathbf{Definition\ 7.1.2}$ ($\text{Quotient}$-Introduction). A term of type
                    $\text{Quotient}\ \alpha\ r$ is introduced by the constructor $\text{Quot}$, which
                    maps an element $a : \alpha$ to its equivalence class under $r$.
                +tex(true).
                    $$
                        \text{Quot} :
                    $$
                    $$
                        \prod_{\alpha : U} \prod_{r : \alpha \to \alpha \to \text{Prop}}
                        \prod_{a : \alpha} \text{Quotient}\ \alpha\ r.
                    $$
                +code.
                    let quot_intro (alpha : exp)
                      (r : exp) (a : exp) : exp =
                        Quot (alpha, r, a)

                h2 Elimination
                +tex.
                    $\mathbf{Definition\ 7.1.3}$ ($\text{Quotient}$-Elimination). The dependent
                    eliminator $\text{QuotInd}$ allows proving a property
                    $\beta : \text{Quotient}\ \alpha\ r \to \text{Prop}$ for all
                    $q : \text{Quotient}\ \alpha\ r$, given it holds for all
                    $\text{Quot}\ \alpha\ r\ a$.
                +tex(true).
                    $$
                        \text{QuotInd} :
                    $$
                    $$
                        \prod_{\alpha : U} \prod_{r : \alpha \to \alpha \to \text{Prop}}
                        \prod_{\beta : \text{Quotient}\ \alpha\ r \to \text{Prop}}
                    $$
                    $$
                        \left( \prod_{a : \alpha} \beta\ (\text{Quot}\ \alpha\ r\ a) \right) \to
                        \prod_{q : \text{Quotient}\ \alpha\ r} \beta\ q.
                    $$
                +code.
                    let quot_ind (alpha : exp) (r : exp)
                      (beta : exp) (h : exp) : exp =
                        QuotInd (alpha, r, beta, h)

                h2 Computation
                +tex.
                    $\mathbf{Definition\ 7.1.4}$ ($\text{Quotient}$-Computation). The application of
                    $\text{QuotInd}$ to a term $\text{Quot}\ \alpha\ r\ a$ reduces to the application
                    of the hypothesis $h$ to $a$, ensuring computational soundness.
                +tex(true).
                    $$
                        \text{QuotInd}\ \alpha\ r\ \beta\ h\ (\text{Quot}\ \alpha\ r\ a)
                    $$
                    $$
                        =_{\beta\ (\text{Quot}\ \alpha\ r\ a)}\ h\ a.
                    $$
                +code.
                    let reduce env ctx = function
                      | App (QuotInd (_, _, _, h), Quot (_, _, a)) -> App (h, a)
                      | _ -> ...

                h2 Uniqueness
                +tex.
                    $\mathbf{Definition\ 7.1.5}$ ($\text{Quotient}$-Uniqueness). Two quotient types
                    $\text{Quotient}\ \alpha\ r$ and $\text{Quotient}\ \alpha'\ r'$ are equal if
                    $\alpha = \alpha'$ and $r = r'$.
                +tex(true).
                    $$
                        \text{Quotient}\ \alpha\ r =_U \text{Quotient}\ \alpha'\ r'
                    $$
                    $$
                        \iff \alpha =_U \alpha' \land r =_{\alpha \to \alpha \to \text{Prop}} r'.
                    $$
                +tex.
                    For terms, $\text{Quot}\ \alpha\ r\ a = \text{Quot}\ \alpha\ r\ b$ if $r\ a\ b$
                    holds, reflecting the quotient’s identification.
                +tex(true).
                    $$
                        \text{Quot}\ \alpha\ r\ a =_{\text{Quotient}\ \alpha\ r} \text{Quot}\ \alpha\ r\ b
                    $$
                    $$
                        \iff r\ a\ b.
                    $$

                +code.
                    let equal_quotient env ctx (Quotient (a1, r1)) (Quotient (a2, r2)) =
                      equal env ctx a1 a2 && equal env ctx r1 r2

                h2 Theorems
                +tex.
                    $\mathbf{Theorem\ 7.1.6}$ (Non-Dependent Elimination). The non-dependent eliminator
                    $\text{QuotLift}$ lifts a function $f : \alpha \to \beta$ to a function
                    $\text{Quotient}\ \alpha\ r \to \beta$, provided $f$ respects the relation $r$, and
                    is derivable from $\text{QuotInd}$.

                +tex(true).
                    $$
                        \text{QuotLift} :
                    $$
                    $$
                        \prod_{\alpha : U} \prod_{r : \alpha \to \alpha \to \text{Prop}}
                        \prod_{\beta : U} \prod_{f : \alpha \to \beta}
                    $$
                    $$
                        \left( \prod_{a : \alpha} \prod_{b : \alpha} r\ a\ b \to f\ a = f\ b \right) \to
                    $$
                    $$
                        \text{Quotient}\ \alpha\ r \to \beta.
                    $$

                +code.
                    let quot_lift (alpha : exp) (r : exp)
                      (beta : exp) (f : exp) (h : exp) : exp =
                        QuotLift (alpha, r, beta, f, h)

                +tex.
                    $\mathbf{Theorem\ 7.1.7}$ (Non-Dependent Elimination Derivability). The non-dependent eliminator
                    $\text{QuotLift}$ lifts a function $f : \alpha \to \beta$ to a function
                    $\text{Quotient}\ \alpha\ r \to \beta$, provided $f$ respects the relation $r$, and
                    is derivable from $\text{QuotInd}$ as follows:

                +tex(true).
                    $$
                        \text{QuotLift}\ \alpha\ r\ \beta\ f\ h =
                    $$
                    $$
                        \text{QuotInd}\ \alpha\ r\ (\lambda q.\ \beta)\ (\lambda a.\ f\ a).
                    $$

                +code.
                    let quot_lift_derivable alpha r beta f h =
                       let beta_prop = Lam ("q", Quotient (alpha, r), beta) in
                       let h_prime = Lam ("a", alpha, App (f, Var "a")) in
                         QuotInd (alpha, r, beta_prop, h_prime)

                +tex.
                    $\mathbf{Theorem\ 7.1.8}$ (Soundness of Lift). The lifted function respects the
                    equivalence relation: if $r\ a\ b$, then
                +tex(true).
                    $$
                        \text{QuotLift}\ f\ h\ (\text{Quot}\ a) =
                    $$
                    $$
                        \text{QuotLift}\ f\ h\ (\text{Quot}\ b)$.
                    $$

                +tex(true).
                    $$
                        r\ a\ b \implies
                    $$
                    $$
                        \text{QuotLift}\ \alpha\ r\ \beta\ f\ h\ (\text{Quot}\ \alpha\ r\ a) =_{\beta}
                    $$
                    $$
                        \text{QuotLift}\ \alpha\ r\ \beta\ f\ h\ (\text{Quot}\ \alpha\ r\ b).
                    $$

include ../../footer
