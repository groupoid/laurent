include ../../header

html
    head
        meta(property='og:title'       content='MU')
        meta(property='og:description' content='Measure Constructor')
        meta(property='og:url'         content='https://laurent.groupoid.space/foundations/mltt/mu/')

block title
    title MU

block content
    nav
        <a href='../../index.html'>LAURENT</a>
        <a href='#'>MU</a>
    article.main
        .exe
            section
                h1 MEASURE CONSTRUCTOR
                span.
        aside
            time Published: 21 MAR 2025
        .exe
            section
                +tex.
                    $\mu$-type constructs a measure over a base type and a $\sigma$-algebra,
                    defining a function that assigns real values to measurable sets. It is a
                    cornerstone of measure theory in this system, enabling integration and analysis.
                +tex.
                    In Schwartz’s framework, $\mu$ supports Lebesgue measures and custom measures,
                    with its evaluation tied to predicate conditions and real arithmetic.

                h2 Formation
                +tex.
                    $\mathbf{Definition\ 1.1}$ ($\mu$-Formation). A measure is formed over a base
                    type $A : U$, a $\sigma$-algebra $\Sigma : \text{Set}(\text{Set}(A))$, and a
                    measure function $f : \text{Set}(A) \rightarrow \mathbb{R}$.
                +tex(true).
                    $$
                        \mu : \text{Measure}(A, \Sigma) =_{def} \mu(A, \Sigma, f).
                    $$
                +code.
                    type exp =
                      | Mu of exp * exp * exp  (* μ (A, Σ, f) *)

                h2 Introduction
                +tex.
                    $\mathbf{Definition\ 1.2}$ ($\mu$-Introduction). A measure is introduced by
                    specifying a base type $A$, a $\sigma$-algebra $\Sigma$, and a lambda function
                    $\lambda S. m(S)$ mapping sets to real numbers, satisfying measure axioms.
                +tex(true).
                    $$
                        \mu(A, \Sigma, \lambda S. m(S)) : \text{Measure}(A, \Sigma).
                    $$
                +code.
                    let lebesgue_measure (a : exp) (b : exp) : exp =
                      Mu (Real, Power (Set Real),
                          Lam ("S", Set Real,
                              If (RealIneq (Lte, a, b), RealOps (Minus, b, a), Zero)))

                h2 Elimination
                +tex.
                    $\mathbf{Definition\ 1.3}$ ($\mu$-Elimination). Applying a measure $\mu$ to a
                    set $S : \Sigma$ yields a real number $\mu(S)$, computed by the measure function.
                +tex(true).
                    $$
                        \mu(S) : \mathbb{R} =_{def} \text{App}(\mu, S).
                    $$
                +code.
                    let apply_measure (mu : exp) (s : exp) : exp =
                      App (mu, s)  (* μ S *)

                h2 Computation
                +tex.
                    $\mathbf{Definition\ 1.4}$ ($\mu$-Computation). The application of a measure
                    reduces to its function body with substitution, constrained by measure properties.
                +tex(true).
                    $$
                        \mu(A, \Sigma, \lambda S. m(S))(T) =_{\mathbb{R}} m(T).
                    $$
                +code.
                    let reduce env ctx = function
                      | App (Mu (_, _, Lam (s, _, body)), arg) -> subst s arg body
                      | _ -> ...

                h2 Uniqueness
                +tex.
                    $\mathbf{Definition\ 1.5}$ ($\mu$-Uniqueness). Two measures $\mu_1, \mu_2 :
                    \text{Measure}(A, \Sigma)$ are equal if they assign the same values to all
                    sets in $\Sigma$, i.e., $\forall S : \Sigma, \mu_1(S) = \mu_2(S)$.
                +tex(true).
                    $$
                        \mu_1 =_{\text{Measure}(A, \Sigma)} \mu_2 \iff \forall S : \Sigma, \mu_1(S) =_{\mathbb{R}} \mu_2(S).
                    $$
                +code.
                    (* Equality via pointwise equivalence *)

                h2 Theorems
                +tex.
                    $\mathbf{Theorem\ 1.6}$ (Non-Negativity). For any measure $\mu : \text{Measure}(A, \Sigma)$
                    and set $S : \Sigma$, $\mu(S) \geq 0$, ensured by the measure function’s definition.
                +tex(true).
                    $$
                        \forall S : \Sigma, \mu(S) \geq 0.
                    $$
                +tex.
                    $\mathbf{Theorem\ 1.7}$ (Countable Additivity). If $\{ S_n \}_{n : \mathbb{N}}$
                    is a countable collection of disjoint sets in $\Sigma$, then
                    $\mu(\bigcup_n S_n) = \sum_n \mu(S_n)$, assumed in the measure function.
                +tex(true).
                    $$
                        \mu\left(\bigcup_{n : \mathbb{N}} S_n\right) = \sum_{n : \mathbb{N}} \mu(S_n).
                    $$
                +code.
                    let sigma_algebra = is_sigma_algebra (Power (Set Real))

include ../../footer