include ../../header

html
    head
        meta(property='og:title'       content='UNION')
        meta(property='og:description' content='Infinite Union')
        meta(property='og:url'         content='https://laurent.groupoid.space/foundations/union/')

block title
    title UNION

block content
    nav
        <a href='../../index.html'>LAURENT</a>
        <a href='#'>UNION</a>
    article.main
        .exe
            section
                h1 INFINITE UNION
                span.
        aside
            time Published: 21 MAR 2025
        .exe
            section
                +tex.
                    $\text{Definition\ 5.6.1}$ (Union). defines an infinite union over an indexed family of sets,
                    foundational for $\sigma$-algebras and limits in analysis.
                +tex(true).
                    $$
                        \text{Union} : \text{Set}(A) =_{def} \bigcup_{i : I} S_i.
                    $$
                +code.
                    type exp =
                      | Union of exp * exp  (* â‹ƒ_i S_i *)

                h2 Rules
                +tex.
                    $\text{Definition\ 5.6.2}$. (Intro). Introduced as $\text{Union}(I, S)$, where $I : U_0$ is an index type
                    (e.g., $\mathbb{N}$) and $S : I \rightarrow \text{Set}(A)$ is a family.
                    Membership is $\exists i : I, x \in S_i$, feeding into $\text{Limit}$.
                +tex(true).
                    $$
                        x \in \bigcup_{i : I} S_i \iff \exists i : I, S_i(x).
                    $$
                +code.
                    let infinite_union (i : exp) (s : exp) : exp =
                      Union (i, s)

                h2 Theorems
                +tex.
                    $\text{Theorem\ 5.6.3}$ (Measure). For $\mu : \text{Measure}(A, \Sigma)$ and
                    disjoint $\{ S_n \}_{n : \mathbb{N}} \subseteq \Sigma$,
                    $\mu(\bigcup_{n} S_n) = \sum_{n} \mu(S_n)$.
                +code.
                    let measure_union (mu : exp) (s : exp) =
                      SetEq (App (mu, Union (Nat, s)),
                        Sum (Nat, Lam ("n", Nat,
                          App (mu, App (s, Var "n")))))

include ../../footer
